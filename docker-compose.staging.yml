version: '3.8'

services:
  # ===================
  # INFRASTRUCTURE SERVICES
  # ===================
  
  # PostgreSQL - Production optimized
  postgres-auth:
    image: postgres:16-alpine
    container_name: devsfit-postgres-auth-staging
    environment:
      POSTGRES_DB: devsfit_auth
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
      - ./infrastructure/databases/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d devsfit_auth"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # Redis - Production optimized
  redis:
    image: redis:7-alpine
    container_name: devsfit-redis-staging
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  # ===================
  # MICROSERVICES
  # ===================
  
  auth-service:
    image: ghcr.io/${GITHUB_REPOSITORY}/auth-service:staging
    container_name: devsfit-auth-service-staging
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres-auth:5432/devsfit_auth
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # ===================
  # MONITORING
  # ===================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: devsfit-prometheus-staging
    volumes:
      - ./infrastructure/monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - devsfit-network
    restart: unless-stopped

volumes:
  postgres-auth-data:
  redis-data:
  prometheus-data:

networks:
  devsfit-network:
    driver: bridge
