version: '3.8'

services:
  # ===================
  # INFRASTRUCTURE SERVICES
  # ===================
  
  postgres-production:
    image: postgres:16-alpine
    container_name: devsfit-postgres-production
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: devsfit_production
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-production-data:/var/lib/postgresql/data
    networks:
      - devsfit-production-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d devsfit_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  redis-production:
    image: redis:7-alpine
    container_name: devsfit-redis-production
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-password}
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-production-data:/data
    networks:
      - devsfit-production-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  rabbitmq-production:
    image: rabbitmq:3-management-alpine
    container_name: devsfit-rabbitmq-production
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-password}
    volumes:
      - rabbitmq-production-data:/var/lib/rabbitmq
    ports:
      - "5673:5672"
      - "15673:15672"
    networks:
      - devsfit-production-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # ===================
  # MICROSERVICES (LOCAL BUILD)
  # ===================
  
  api-gateway-production:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.prod
    container_name: devsfit-api-gateway-production
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_HOST=redis-production
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-password}@rabbitmq-production:5672
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres-production:5432/devsfit_production
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - RATE_LIMIT_REDIS_HOST=redis-production
      - PROMETHEUS_PORT=9090
    depends_on:
      postgres-production:
        condition: service_healthy
      redis-production:
        condition: service_healthy
      rabbitmq-production:
        condition: service_healthy
    networks:
      - devsfit-production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  auth-service-production:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.prod
    container_name: devsfit-auth-service-production
    ports:
      - "3021:3020"
    environment:
      - NODE_ENV=production
      - PORT=3020
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres-production:5432/devsfit_production
      - REDIS_HOST=redis-production
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your-refresh-secret}
      - PROMETHEUS_PORT=9464
    depends_on:
      postgres-production:
        condition: service_healthy
      redis-production:
        condition: service_healthy
    networks:
      - devsfit-production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  package-service-production:
    build:
      context: ./services/package-service
      dockerfile: Dockerfile.prod
    container_name: devsfit-package-service-production
    ports:
      - "3006:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres-production:5432/devsfit_production
      - REDIS_HOST=redis-production
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - PROMETHEUS_PORT=9466
    depends_on:
      postgres-production:
        condition: service_healthy
      redis-production:
        condition: service_healthy
    networks:
      - devsfit-production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  billing-service-production:
    build:
      context: ./services/billing-service
      dockerfile: Dockerfile.prod
    container_name: devsfit-billing-service-production
    ports:
      - "3008:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres-production:5432/devsfit_production
      - REDIS_HOST=redis-production
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - PROMETHEUS_PORT=9467
    depends_on:
      postgres-production:
        condition: service_healthy
      redis-production:
        condition: service_healthy
    networks:
      - devsfit-production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  payment-service-production:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile.prod
    container_name: devsfit-payment-service-production
    ports:
      - "3009:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres-production:5432/devsfit_production
      - REDIS_HOST=redis-production
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - SSLCOMMERZ_STORE_ID=${SSLCOMMERZ_STORE_ID:-testbox}
      - SSLCOMMERZ_STORE_PASSWORD=${SSLCOMMERZ_STORE_PASSWORD:-qwerty}
      - SSLCOMMERZ_SANDBOX=${SSLCOMMERZ_SANDBOX:-false}
      - PROMETHEUS_PORT=9468
    depends_on:
      postgres-production:
        condition: service_healthy
      redis-production:
        condition: service_healthy
    networks:
      - devsfit-production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # ===================
  # MONITORING (PRODUCTION)
  # ===================
  
  prometheus-production:
    image: prom/prometheus:latest
    container_name: devsfit-prometheus-production
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-production-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - devsfit-production-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  grafana-production:
    image: grafana/grafana:latest
    container_name: devsfit-grafana-production
    ports:
      - "3013:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-production-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus-production
    networks:
      - devsfit-production-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  jaeger-production:
    image: jaegertracing/all-in-one:latest
    container_name: devsfit-jaeger-production
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    networks:
      - devsfit-production-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

# ===================
# VOLUMES (PRODUCTION)
# ===================

volumes:
  postgres-production-data:
  redis-production-data:
  rabbitmq-production-data:
  prometheus-production-data:
  grafana-production-data:

# ===================
# NETWORKS (PRODUCTION)
# ===================

networks:
  devsfit-production-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
