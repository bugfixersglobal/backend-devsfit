// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================
// ENUMS
// ===================

enum PackageType {
  BASIC
  PRO
}

enum PackageStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

// ===================
// PACKAGE MANAGEMENT
// ===================

model Package {
  id                String        @id @default(uuid()) @db.Uuid
  name              String        @unique @db.VarChar(100)
  description       String?       @db.Text
  packageType       PackageType   @map("package_type")
  isPopular         Boolean       @default(false) @map("is_popular")
  
  // Member limits
  maxMembers        Int?          @map("max_members")
  unlimitedMembers  Boolean       @default(false) @map("unlimited_members")
  
  // Billing cycles
  billingCycles     PackageBillingCycle[]
  
  // Modules and features
  modules           PackageModule[]
  additionalFeatures String[]      @map("additional_features") @db.VarChar(255)
  
  // Status and metadata
  status            PackageStatus @default(ACTIVE)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  @@map("packages")
}

model PackageBillingCycle {
  id          String  @id @default(uuid()) @db.Uuid
  packageId   String  @map("package_id") @db.Uuid
  months      Int     // Number of months (1, 6, 12, etc.)
  price       Decimal @db.Decimal(10, 2)
  discount    Int     @default(0) // Discount percentage
  createdAt   DateTime @default(now()) @map("created_at")
  
  package     Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
  @@map("package_billing_cycles")
}

model Module {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(100)
  icon      String   @db.VarChar(255)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String   @map("created_by") @db.Uuid
  
  packageModules PackageModule[]
  
  @@map("modules")
}

model PackageModule {
  id        String  @id @default(uuid()) @db.Uuid
  packageId String  @map("package_id") @db.Uuid
  moduleId  String  @map("module_id") @db.Uuid
  isEnabled Boolean @default(true) @map("is_enabled")
  createdAt DateTime @default(now()) @map("created_at")
  
  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  module  Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([packageId, moduleId])
  @@map("package_modules")
}