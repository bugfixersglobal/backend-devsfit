version: '3.8'

services:
  # ===================
  # LOAD BALANCER (STAGING)
  # ===================
  
  nginx-staging:
    image: nginx:alpine
    container_name: devsfit-nginx-staging
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl-staging:/etc/nginx/ssl:ro
      - nginx-staging-cache:/var/cache/nginx
    depends_on:
      - api-gateway-staging
    networks:
      - devsfit-staging-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================
  # DATABASE (STAGING)
  # ===================
  
  postgres-staging:
    image: postgres:16-alpine
    container_name: devsfit-postgres-staging
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: devsfit_staging
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-staging-data:/var/lib/postgresql/data
      - ./postgres/postgresql-staging.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d devsfit_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # ===================
  # REDIS (STAGING)
  # ===================
  
  redis-staging:
    image: redis:7-alpine
    container_name: devsfit-redis-staging
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-staging-data:/data
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # ===================
  # RABBITMQ (STAGING)
  # ===================
  
  rabbitmq-staging:
    image: rabbitmq:3-management-alpine
    container_name: devsfit-rabbitmq-staging
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
    volumes:
      - rabbitmq-staging-data:/var/lib/rabbitmq
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # ===================
  # API GATEWAY (STAGING)
  # ===================
  
  api-gateway-staging:
    image: ghcr.io/${GITHUB_REPOSITORY}/api-gateway:${IMAGE_TAG}
    container_name: devsfit-api-gateway-staging
    environment:
      - NODE_ENV=staging
      - PORT=3000
      - REDIS_HOST=redis-staging
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq-staging:5672
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-staging:5432/devsfit_staging
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_REDIS_HOST=redis-staging
      - PROMETHEUS_PORT=9090
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
      rabbitmq-staging:
        condition: service_healthy
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # ===================
  # MICROSERVICES (STAGING)
  # ===================
  
  auth-service-staging:
    image: ghcr.io/${GITHUB_REPOSITORY}/auth-service:${IMAGE_TAG}
    container_name: devsfit-auth-service-staging
    environment:
      - NODE_ENV=staging
      - PORT=3020
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-staging:5432/devsfit_staging
      - REDIS_HOST=redis-staging
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - PROMETHEUS_PORT=9464
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  user-service-staging:
    image: ghcr.io/${GITHUB_REPOSITORY}/user-service:${IMAGE_TAG}
    container_name: devsfit-user-service-staging
    environment:
      - NODE_ENV=staging
      - PORT=3002
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-staging:5432/devsfit_staging
      - REDIS_HOST=redis-staging
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PROMETHEUS_PORT=9465
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  package-service-staging:
    image: ghcr.io/${GITHUB_REPOSITORY}/package-service:${IMAGE_TAG}
    container_name: devsfit-package-service-staging
    environment:
      - NODE_ENV=staging
      - PORT=3003
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-staging:5432/devsfit_staging
      - REDIS_HOST=redis-staging
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PROMETHEUS_PORT=9466
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  billing-service-staging:
    image: ghcr.io/${GITHUB_REPOSITORY}/billing-service:${IMAGE_TAG}
    container_name: devsfit-billing-service-staging
    environment:
      - NODE_ENV=staging
      - PORT=3004
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-staging:5432/devsfit_staging
      - REDIS_HOST=redis-staging
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PROMETHEUS_PORT=9467
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  payment-service-staging:
    image: ghcr.io/${GITHUB_REPOSITORY}/payment-service:${IMAGE_TAG}
    container_name: devsfit-payment-service-staging
    environment:
      - NODE_ENV=staging
      - PORT=3005
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-staging:5432/devsfit_staging
      - REDIS_HOST=redis-staging
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SSLCOMMERZ_STORE_ID=${SSLCOMMERZ_STORE_ID}
      - SSLCOMMERZ_STORE_PASSWORD=${SSLCOMMERZ_STORE_PASSWORD}
      - SSLCOMMERZ_SANDBOX=${SSLCOMMERZ_SANDBOX}
      - PROMETHEUS_PORT=9468
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    networks:
      - devsfit-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # ===================
  # MONITORING (STAGING)
  # ===================
  
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: devsfit-prometheus-staging
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-staging-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - devsfit-staging-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  grafana-staging:
    image: grafana/grafana:latest
    container_name: devsfit-grafana-staging
    ports:
      - "3014:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: https://monitoring-staging.devsfit.com/grafana
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
    volumes:
      - grafana-staging-data:/var/lib/grafana
      - ./monitoring/grafana-staging-dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus-staging
    networks:
      - devsfit-staging-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  jaeger-staging:
    image: jaegertracing/all-in-one:latest
    container_name: devsfit-jaeger-staging
    ports:
      - "16687:16686"
      - "14269:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    networks:
      - devsfit-staging-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

# ===================
# VOLUMES (STAGING)
# ===================

volumes:
  nginx-staging-cache:
  postgres-staging-data:
  redis-staging-data:
  rabbitmq-staging-data:
  prometheus-staging-data:
  grafana-staging-data:

# ===================
# NETWORKS (STAGING)
# ===================

networks:
  devsfit-staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
