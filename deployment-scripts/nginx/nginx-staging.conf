worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting (staging - more lenient)
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=200r/s;

    # Upstream definitions for staging microservices
    upstream api_gateway_staging_backend {
        server api-gateway-staging:3000;
    }

    upstream auth_service_staging_backend {
        server auth-service-staging:3020;
    }

    upstream user_service_staging_backend {
        server user-service-staging:3002;
    }

    upstream package_service_staging_backend {
        server package-service-staging:3003;
    }

    upstream billing_service_staging_backend {
        server billing-service-staging:3004;
    }

    upstream payment_service_staging_backend {
        server payment-service-staging:3005;
    }

    server {
        listen 80;
        listen [::]:80;
        server_name staging.devsfit.com api-staging.devsfit.com;

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name staging.devsfit.com api-staging.devsfit.com;

        # SSL/TLS Configuration (staging - self-signed or staging cert)
        ssl_certificate /etc/nginx/ssl/staging-cert.pem;
        ssl_certificate_key /etc/nginx/ssl/staging-key.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;

        # Security Headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Client Max Body Size
        client_max_body_size 100M;

        # API Gateway Proxy (staging)
        location /api/v1/ {
            limit_req zone=api_limit burst=50 nodelay;
            proxy_pass http://api_gateway_staging_backend/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "STAGING OK";
        }

        # Monitoring endpoints (staging)
        location /monitoring/ {
            auth_basic "Staging Monitoring";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass http://prometheus-staging:9090/;
        }

        location /grafana/ {
            auth_basic "Staging Grafana";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass http://grafana-staging:3000/;
        }

        location /jaeger/ {
            auth_basic "Staging Jaeger";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass http://jaeger-staging:16686/;
        }

        # Error pages
        error_page 400 401 403 404 500 502 503 504 /error.html;
        location = /error.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
