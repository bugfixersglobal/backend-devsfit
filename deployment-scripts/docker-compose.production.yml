version: '3.8'

services:
  # ===================
  # LOAD BALANCER
  # ===================
  
  nginx:
    image: nginx:alpine
    container_name: devsfit-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - api-gateway-1
      - api-gateway-2
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================
  # DATABASE CLUSTER
  # ===================
  
  # PgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: devsfit-pgbouncer-prod
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: "*"
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      MIN_POOL_SIZE: 10
      RESERVE_POOL_SIZE: 5
      SERVER_LIFETIME: 3600
      SERVER_IDLE_TIMEOUT: 600
      LOG_CONNECTIONS: 1
      LOG_DISCONNECTIONS: 1
    ports:
      - "6432:6432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped

  # PostgreSQL Primary
  postgres-primary:
    image: postgres:16-alpine
    container_name: devsfit-postgres-primary-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: devsfit_primary
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.7
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init:/docker-entrypoint-initdb.d
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d devsfit_primary"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:16-alpine
    container_name: devsfit-postgres-replica-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    command: |
      bash -c '
      until pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U ${POSTGRES_USER} -v -P -W;
      do
        echo "Waiting for primary to be ready..."
        sleep 1s
      done
      echo "standby_mode = on" >> /var/lib/postgresql/data/recovery.conf
      echo "primary_conninfo = \"host=postgres-primary port=5432 user=${POSTGRES_USER}\"" >> /var/lib/postgresql/data/recovery.conf
      postgres
      '
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  # ===================
  # REDIS CLUSTER
  # ===================
  
  redis-master:
    image: redis:7-alpine
    container_name: devsfit-redis-master-prod
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --masterauth ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
      --tcp-backlog 511
    volumes:
      - redis-master-data:/data
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.0'
    restart: unless-stopped

  redis-sentinel-1:
    image: redis:7-alpine
    container_name: devsfit-redis-sentinel-1-prod
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped

  # ===================
  # MESSAGE QUEUE CLUSTER
  # ===================
  
  rabbitmq-1:
    image: rabbitmq:3-management-alpine
    container_name: devsfit-rabbitmq-1-prod
    hostname: rabbitmq-1
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_CLUSTER_NAME: devsfit-cluster
    volumes:
      - rabbitmq-1-data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  # ===================
  # API GATEWAY CLUSTER
  # ===================
  
  api-gateway-1:
    image: ghcr.io/${GITHUB_REPOSITORY}/api-gateway:${IMAGE_TAG}
    container_name: devsfit-api-gateway-1-prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_HOST=redis-master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq-1:5672
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/devsfit_primary
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_REDIS_HOST=redis-master
      - PROMETHEUS_PORT=9090
    depends_on:
      pgbouncer:
        condition: service_started
      redis-master:
        condition: service_healthy
      rabbitmq-1:
        condition: service_healthy
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  api-gateway-2:
    image: ghcr.io/${GITHUB_REPOSITORY}/api-gateway:${IMAGE_TAG}
    container_name: devsfit-api-gateway-2-prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_HOST=redis-master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq-1:5672
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/devsfit_primary
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_REDIS_HOST=redis-master
      - PROMETHEUS_PORT=9091
    depends_on:
      pgbouncer:
        condition: service_started
      redis-master:
        condition: service_healthy
      rabbitmq-1:
        condition: service_healthy
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped

  # ===================
  # MICROSERVICES CLUSTER
  # ===================
  
  auth-service-1:
    image: ghcr.io/${GITHUB_REPOSITORY}/auth-service:${IMAGE_TAG}
    container_name: devsfit-auth-service-1-prod
    environment:
      - NODE_ENV=production
      - PORT=3020
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/devsfit_auth
      - REDIS_HOST=redis-master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - PROMETHEUS_PORT=9464
    depends_on:
      pgbouncer:
        condition: service_started
      redis-master:
        condition: service_healthy
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  auth-service-2:
    image: ghcr.io/${GITHUB_REPOSITORY}/auth-service:${IMAGE_TAG}
    container_name: devsfit-auth-service-2-prod
    environment:
      - NODE_ENV=production
      - PORT=3020
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/devsfit_auth
      - REDIS_HOST=redis-master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - PROMETHEUS_PORT=9465
    depends_on:
      pgbouncer:
        condition: service_started
      redis-master:
        condition: service_healthy
    networks:
      - devsfit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  # ===================
  # MONITORING STACK
  # ===================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: devsfit-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-production.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://monitoring.yourdomain.com/prometheus'
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: devsfit-grafana-prod
    ports:
      - "3013:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,redis-datasource
      GF_SERVER_ROOT_URL: https://monitoring.yourdomain.com/grafana
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: pgbouncer:6432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: ${POSTGRES_USER}
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
      - pgbouncer
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: devsfit-alertmanager-prod
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://monitoring.yourdomain.com/alertmanager'
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: devsfit-jaeger-prod
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: devsfit-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - devsfit-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    restart: unless-stopped

  # ===================
  # BACKUP SERVICES
  # ===================
  
  backup-scheduler:
    image: alpine:latest
    container_name: devsfit-backup-scheduler-prod
    volumes:
      - ./backup-scripts:/backup-scripts:ro
      - backup-data:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      sh -c "
        apk add --no-cache docker-cli postgresql-client redis dcron
        echo '0 2 * * * /backup-scripts/daily-backup.sh' | crontab -
        echo '0 3 * * 0 /backup-scripts/weekly-backup.sh' | crontab -
        crond -f
      "
    depends_on:
      - postgres-primary
      - redis-master
    networks:
      - devsfit-network
    restart: unless-stopped

# ===================
# VOLUMES
# ===================

volumes:
  nginx-cache:
  postgres-primary-data:
    external: true
    name: devsfit-postgres-primary-data
  postgres-replica-data:
    external: true
    name: devsfit-postgres-replica-data
  redis-master-data:
    external: true
    name: devsfit-redis-master-data
  rabbitmq-1-data:
    external: true
    name: devsfit-rabbitmq-1-data
  prometheus-data:
    external: true
    name: devsfit-prometheus-data
  grafana-data:
    external: true
    name: devsfit-grafana-data
  alertmanager-data:
  elasticsearch-data:
    external: true
    name: devsfit-elasticsearch-data
  backup-data:
    external: true
    name: devsfit-backup-data

# ===================
# NETWORKS
# ===================

networks:
  devsfit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
